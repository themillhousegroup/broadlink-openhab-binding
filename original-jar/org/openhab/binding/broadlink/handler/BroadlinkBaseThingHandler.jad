// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   BroadlinkBaseThingHandler.java

package org.openhab.binding.broadlink.handler;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.*;
import java.util.*;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.crypto.spec.IvParameterSpec;
import org.eclipse.smarthome.core.thing.*;
import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;
import org.eclipse.smarthome.core.types.Command;
import org.eclipse.smarthome.core.types.RefreshType;
import org.openhab.binding.broadlink.BroadlinkBindingConstants;
import org.openhab.binding.broadlink.config.BroadlinkDeviceConfiguration;
import org.openhab.binding.broadlink.internal.Hex;
import org.openhab.binding.broadlink.internal.Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BroadlinkBaseThingHandler extends BaseThingHandler
{

    public BroadlinkBaseThingHandler(Thing thing)
    {
        super(thing);
        count = 0;
    }

    public void initialize()
    {
        if(logger.isDebugEnabled())
            logger.debug("Initializing Broadlink device handler '{}'", getThing().getUID());
        count = (new Random()).nextInt(65535);
        thingConfig = (BroadlinkDeviceConfiguration)getConfigAs(org/openhab/binding/broadlink/config/BroadlinkDeviceConfiguration);
        if(iv != thingConfig.getIV() || authenticationKey != thingConfig.getAuthorizationKey())
        {
            iv = thingConfig.getIV();
            authenticationKey = thingConfig.getAuthorizationKey();
            Map properties = editProperties();
            properties.put("id", null);
            properties.put("key", null);
            updateProperties(properties);
            if(authenticate())
                updateStatus(ThingStatus.ONLINE);
            else
                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);
        }
        if(thingConfig.getPollingInterval() != 0)
            scheduler.scheduleWithFixedDelay(new Runnable() {

                public void run()
                {
                    updateItemStatus();
                }

                final BroadlinkBaseThingHandler this$0;

            
            {
                this$0 = BroadlinkBaseThingHandler.this;
                super();
            }
            }
, 1L, thingConfig.getPollingInterval(), TimeUnit.SECONDS);
    }

    public void thingUpdated(Thing thing)
    {
        if(iv != thingConfig.getIV() || authenticationKey != thingConfig.getAuthorizationKey())
        {
            iv = thingConfig.getIV();
            authenticationKey = thingConfig.getAuthorizationKey();
            if(authenticate())
                updateStatus(ThingStatus.ONLINE);
            else
                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);
        }
        updateItemStatus();
    }

    public void dispose()
    {
        logger.error("'{}' is being disposed", getThing().getLabel());
        super.dispose();
    }

    private boolean authenticate()
    {
        byte payload[] = new byte[80];
        payload[4] = 49;
        payload[5] = 49;
        payload[6] = 49;
        payload[7] = 49;
        payload[8] = 49;
        payload[9] = 49;
        payload[10] = 49;
        payload[11] = 49;
        payload[12] = 49;
        payload[13] = 49;
        payload[14] = 49;
        payload[15] = 49;
        payload[16] = 49;
        payload[17] = 49;
        payload[18] = 49;
        payload[30] = 1;
        payload[45] = 1;
        payload[48] = 84;
        payload[49] = 101;
        payload[50] = 115;
        payload[51] = 116;
        payload[52] = 32;
        payload[53] = 32;
        payload[54] = 49;
        if(!sendDatagram(buildMessage((byte)101, payload)))
        {
            logger.debug("Authenticated device '{}' failed.", getThing().getUID());
            return false;
        }
        byte response[] = receiveDatagram();
        if(response == null)
        {
            logger.debug("Authenticated device '{}' failed.", getThing().getUID());
            return false;
        }
        int error = response[34] | response[35] << 8;
        if(error != 0)
        {
            logger.debug("Authenticated device '{}' failed.", getThing().getUID());
            return false;
        }
        byte decryptResponse[] = Utils.decrypt(Hex.convertHexToBytes(authenticationKey), new IvParameterSpec(Hex.convertHexToBytes(iv)), Utils.slice(response, 56, 88));
        byte deviceId[] = Utils.getDeviceId(decryptResponse);
        byte deviceKey[] = Utils.getDeviceKey(decryptResponse);
        Map properties = editProperties();
        properties.put("key", Hex.toHexString(deviceKey));
        properties.put("id", Hex.toHexString(deviceId));
        updateProperties(properties);
        thingConfig = (BroadlinkDeviceConfiguration)getConfigAs(org/openhab/binding/broadlink/config/BroadlinkDeviceConfiguration);
        if(logger.isDebugEnabled())
            logger.debug("Authenticated device '{}' with id '{}' and key '{}'.", new Object[] {
                getThing().getUID(), Hex.toHexString(deviceId), Hex.toHexString(deviceKey)
            });
        return true;
    }

    public boolean sendDatagram(byte message[])
    {
        try
        {
            if(socket == null || socket.isClosed())
            {
                socket = new DatagramSocket();
                socket.setBroadcast(true);
            }
            InetAddress host = InetAddress.getByName(thingConfig.getIpAddress());
            int port = thingConfig.getPort();
            DatagramPacket sendPacket = new DatagramPacket(message, message.length, new InetSocketAddress(host, port));
            commandRunning = Boolean.valueOf(true);
            socket.send(sendPacket);
        }
        catch(IOException e)
        {
            logger.error("IO error for device '{}' during UDP command sending: {}", getThing().getUID(), e.getMessage());
            return false;
        }
        return true;
    }

    public byte[] receiveDatagram()
    {
        byte abyte0[];
        socket.setReuseAddress(true);
        socket.setSoTimeout(5000);
        if(!commandRunning.booleanValue())
            break MISSING_BLOCK_LABEL_318;
        byte response[] = new byte[1024];
        DatagramPacket receivePacket = new DatagramPacket(response, response.length);
        socket.receive(receivePacket);
        response = receivePacket.getData();
        abyte0 = response;
        try
        {
            if(socket != null)
            {
                commandRunning = Boolean.valueOf(false);
                socket.close();
            }
        }
        catch(Exception e)
        {
            logger.error("IO Exception: '{}", e.getMessage());
            commandRunning = Boolean.valueOf(false);
        }
        return abyte0;
        SocketTimeoutException e;
        e;
        if(logger.isDebugEnabled())
            logger.debug("No further response received for device '{}'", getThing().getUID());
        commandRunning = Boolean.valueOf(false);
        try
        {
            if(socket != null)
            {
                commandRunning = Boolean.valueOf(false);
                socket.close();
            }
        }
        catch(Exception e)
        {
            logger.error("IO Exception: '{}", e.getMessage());
            commandRunning = Boolean.valueOf(false);
        }
        return null;
        e;
        logger.error("IO error: Broadlink Device: {}", e.getMessage());
        commandRunning = Boolean.valueOf(false);
        try
        {
            if(socket != null)
            {
                commandRunning = Boolean.valueOf(false);
                socket.close();
            }
        }
        catch(Exception e)
        {
            logger.error("IO Exception: '{}", e.getMessage());
            commandRunning = Boolean.valueOf(false);
        }
        break MISSING_BLOCK_LABEL_365;
        Exception exception;
        exception;
        try
        {
            if(socket != null)
            {
                commandRunning = Boolean.valueOf(false);
                socket.close();
            }
        }
        catch(Exception e)
        {
            logger.error("IO Exception: '{}", e.getMessage());
            commandRunning = Boolean.valueOf(false);
        }
        throw exception;
        try
        {
            if(socket != null)
            {
                commandRunning = Boolean.valueOf(false);
                socket.close();
            }
        }
        catch(Exception e)
        {
            logger.error("IO Exception: '{}", e.getMessage());
            commandRunning = Boolean.valueOf(false);
        }
        return null;
    }

    protected byte[] buildMessage(byte command, byte payload[])
    {
        count = count + 1 & 0xffff;
        byte packet[] = new byte[56];
        byte mac[] = thingConfig.getMAC();
        Map properties = editProperties();
        byte id[];
        if(properties.get("id") == null)
            id = new byte[4];
        else
            id = Hex.fromHexString((String)properties.get("id"));
        packet[0] = 90;
        packet[1] = -91;
        packet[2] = -86;
        packet[3] = 85;
        packet[4] = 90;
        packet[5] = -91;
        packet[6] = -86;
        packet[7] = 85;
        packet[36] = 42;
        packet[37] = 39;
        packet[38] = command;
        packet[40] = (byte)(count & 0xff);
        packet[41] = (byte)(count >> 8);
        packet[42] = mac[0];
        packet[43] = mac[1];
        packet[44] = mac[2];
        packet[45] = mac[3];
        packet[46] = mac[4];
        packet[47] = mac[5];
        packet[48] = id[0];
        packet[49] = id[1];
        packet[50] = id[2];
        packet[51] = id[3];
        int checksum = 48815;
        int i = 0;
        byte abyte0[];
        int k = (abyte0 = payload).length;
        for(int j = 0; j < k; j++)
        {
            byte b = abyte0[j];
            i = Byte.toUnsignedInt(b);
            checksum += i;
            checksum &= 0xffff;
        }

        packet[52] = (byte)(checksum & 0xff);
        packet[53] = (byte)(checksum >> 8);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try
        {
            outputStream.write(packet);
            if(properties.get("key") == null || properties.get("id") == null)
                outputStream.write(Utils.encrypt(Hex.convertHexToBytes(thingConfig.getAuthorizationKey()), new IvParameterSpec(Hex.convertHexToBytes(thingConfig.getIV())), payload));
            else
                outputStream.write(Utils.encrypt(Hex.fromHexString((String)properties.get("key")), new IvParameterSpec(Hex.convertHexToBytes(thingConfig.getIV())), payload));
        }
        catch(IOException e)
        {
            e.printStackTrace();
            return null;
        }
        byte data[] = outputStream.toByteArray();
        checksum = 48815;
        byte abyte1[];
        int i1 = (abyte1 = data).length;
        for(int l = 0; l < i1; l++)
        {
            byte b = abyte1[l];
            i = Byte.toUnsignedInt(b);
            checksum += i;
            checksum &= 0xffff;
        }

        data[32] = (byte)(checksum & 0xff);
        data[33] = (byte)(checksum >> 8);
        return data;
    }

    public void handleCommand(ChannelUID channelUID, Command command)
    {
        if(command instanceof RefreshType)
            updateItemStatus();
    }

    public void updateItemStatus()
    {
        if(hostAvailabilityCheck(thingConfig.getIpAddress(), 3000))
        {
            if(!isOnline())
                updateStatus(ThingStatus.ONLINE);
        } else
        if(!isOffline())
            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, (new StringBuilder("Could not control device at IP address ")).append(thingConfig.getIpAddress()).toString());
    }

    protected static boolean hostAvailabilityCheck(String host, int timeout)
    {
        try
        {
            InetAddress address = InetAddress.getByName(host);
            return address.isReachable(timeout);
        }
        catch(Exception e)
        {
            logger.error("Host is not reachable:", e.getMessage());
        }
        return false;
    }

    protected boolean isOnline()
    {
        return thing.getStatus().equals(ThingStatus.ONLINE);
    }

    protected boolean isOffline()
    {
        return thing.getStatus().equals(ThingStatus.OFFLINE);
    }

    public static final Set SUPPORTED_THING_TYPES;
    private static Logger logger = LoggerFactory.getLogger(org/openhab/binding/broadlink/handler/BroadlinkBaseThingHandler);
    private static DatagramSocket socket = null;
    int count;
    String authenticationKey;
    String iv;
    static Boolean commandRunning = Boolean.valueOf(false);
    public BroadlinkDeviceConfiguration thingConfig;

    static 
    {
        SUPPORTED_THING_TYPES = new HashSet(Arrays.asList(new ThingTypeUID[] {
            BroadlinkBindingConstants.THING_TYPE_A1, BroadlinkBindingConstants.THING_TYPE_RM, BroadlinkBindingConstants.THING_TYPE_RM2, BroadlinkBindingConstants.THING_TYPE_RM3, BroadlinkBindingConstants.THING_TYPE_SP1, BroadlinkBindingConstants.THING_TYPE_SP2, BroadlinkBindingConstants.THING_TYPE_MP1, BroadlinkBindingConstants.THING_TYPE_MP2, BroadlinkBindingConstants.THING_TYPE_SP3
        }));
    }
}
